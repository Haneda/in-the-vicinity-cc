// Autogenerated by - D:/home/lugansky-igor/github/in-the-vicinity-cc/embedded_script_engines/tools/point_gen.py

//#include "app/config.h"  // TODO: Need impl.
#include "forge_v8_point.h"  // TODO: Need connect real.

// C++
#include <string>

using std::string;

using v8::Object;
using v8::Handle;
using v8::Local;
using v8::Value;
using v8::ObjectTemplate;
using v8::External;
using v8::Context;
using v8::Isolate;
using v8::Persistent;
using v8::Integer;
using v8::String;
void ForgeV8Points::v8_getter_x_(
    v8::Local<v8::String> name,
    const v8::PropertyCallbackInfo<v8::Value>& info) 
  {
  Local<Object> self = info.Holder();
  Local<External> wrap = Local<External>::Cast(self->GetInternalField(0));
  void* ptr = wrap->Value();
  int value = static_cast<Point*>(ptr)->x_;
  info.GetReturnValue().Set(Integer::New(value));
}

void ForgeV8Points::v8_getter_y_(
    v8::Local<v8::String> name,
    const v8::PropertyCallbackInfo<v8::Value>& info) 
  {
  Local<Object> self = info.Holder();
  Local<External> wrap = Local<External>::Cast(self->GetInternalField(0));
  void* ptr = wrap->Value();
  int value = static_cast<Point*>(ptr)->y_;
  info.GetReturnValue().Set(Integer::New(value));
}
