// Autogenerated by - D:/home/lugansky-igor/github/in-the-vicinity-cc/embedded_script_engines/tools/point_gen.py

//#include "app/config.h"  // TODO: Need impl.
#include "forge_v8_point.h"  // TODO: Need connect real.

// TODO: It need be impl. manual
v8::Handle<v8::Object> ForgeV8Points::Forge_NI(
      Point* point, 
      v8::Isolate* isolate
      v8::Persistent<v8::ObjectTemplate>* blueprint);

// TODO: It need be impl. manual
v8::Handle<v8::ObjectTemplate> ForgeV8Points::MakeBlueprint_NI() { 

}

void ForgeV8Points::v8_getter_x_(
    v8::Local<v8::String> name,
    const v8::PropertyCallbackInfo<v8::Value>& info) 
  {
  Local<Object> self = info.Holder();
  Local<External> wrap = Local<External>::Cast(self->GetInternalField(0));
  void* ptr = wrap->Value();
  int value = static_cast<Point*>(ptr)->x_;
  info.GetReturnValue().Set(Integer::New(value));
}
void ForgeV8Points::v8_getter_y_(
    v8::Local<v8::String> name,
    const v8::PropertyCallbackInfo<v8::Value>& info) 
  {
  Local<Object> self = info.Holder();
  Local<External> wrap = Local<External>::Cast(self->GetInternalField(0));
  void* ptr = wrap->Value();
  int value = static_cast<Point*>(ptr)->y_;
  info.GetReturnValue().Set(Integer::New(value));
}
void ForgeV8Points::v8_getter_name_(
    v8::Local<v8::String> name,
    const v8::PropertyCallbackInfo<v8::Value>& info) 
  {
  Local<Object> self = info.Holder();
  Local<External> wrap = Local<External>::Cast(self->GetInternalField(0));
  void* ptr = wrap->Value();
  std::string value = static_cast<Point*>(ptr)->name_;
  info.GetReturnValue().Set(String::New(value));
}